const mongoose = require('mongoose');
require('dotenv').config();

const Recipe = require('./models/recipe');

// Function to generate description based on step content
function generateStepDescription(stepText, stepIndex, recipeName) {
    if (!stepText) return '';
    
    const step = stepText.toLowerCase();
    const stepNumber = stepIndex + 1;
    
    // Common cooking action patterns and their descriptions
    const actionDescriptions = {
        // Preparation steps
        's∆° ch·∫ø': `Chu·∫©n b·ªã v√† s∆° ch·∫ø nguy√™n li·ªáu c·∫ßn thi·∫øt cho m√≥n ${recipeName}. ƒê·∫£m b·∫£o t·∫•t c·∫£ nguy√™n li·ªáu ƒë∆∞·ª£c r·ª≠a s·∫°ch v√† c·∫Øt th√†nh k√≠ch c·ª° ph√π h·ª£p.`,
        'chu·∫©n b·ªã': `Chu·∫©n b·ªã t·∫•t c·∫£ nguy√™n li·ªáu c·∫ßn thi·∫øt. ƒêo l∆∞·ªùng ch√≠nh x√°c v√† s·∫Øp x·∫øp g·ªçn g√†ng ƒë·ªÉ qu√° tr√¨nh n·∫•u n∆∞·ªõng di·ªÖn ra thu·∫≠n l·ª£i.`,
        'r·ª≠a': `R·ª≠a s·∫°ch nguy√™n li·ªáu d∆∞·ªõi n∆∞·ªõc ch·∫£y ƒë·ªÉ lo·∫°i b·ªè b·ª•i b·∫©n v√† t·∫°p ch·∫•t. ƒê·ªÉ r√°o n∆∞·ªõc tr∆∞·ªõc khi ch·∫ø bi·∫øn.`,
        'c·∫Øt': `C·∫Øt nguy√™n li·ªáu theo k√≠ch th∆∞·ªõc ph√π h·ª£p. ƒê·∫£m b·∫£o dao s·∫Øc v√† c·∫Øt ƒë·ªÅu ƒë·ªÉ m√≥n ƒÉn c√≥ h√¨nh th·ª©c ƒë·∫πp m·∫Øt.`,
        
        // Mixing and preparation
        'tr·ªôn': `Tr·ªôn ƒë·ªÅu c√°c nguy√™n li·ªáu v·ªõi nhau. S·ª≠ d·ª•ng tay ho·∫∑c d·ª•ng c·ª• tr·ªôn ƒë·ªÉ ƒë·∫£m b·∫£o t·∫•t c·∫£ th√†nh ph·∫ßn ƒë∆∞·ª£c k·∫øt h·ª£p h√†i h√≤a.`,
        'ƒë√°nh': `ƒê√°nh ƒë·ªÅu h·ªón h·ª£p ƒë·ªÉ t·∫°o ƒë·ªô x·ªëp v√† m·ªãn. C√≥ th·ªÉ s·ª≠ d·ª•ng m√°y ƒë√°nh tr·ª©ng ho·∫∑c ƒë√°nh tay t√πy theo y√™u c·∫ßu c·ªßa c√¥ng th·ª©c.`,
        'pha': `Pha lo√£ng v√† tr·ªôn ƒë·ªÅu c√°c nguy√™n li·ªáu l·ªèng. Khu·∫•y t·ª´ t·ª´ ƒë·ªÉ tr√°nh t·∫°o b·ªçt kh√≠ kh√¥ng mong mu·ªën.`,
        'h√≤a': `H√≤a tan ho√†n to√†n c√°c nguy√™n li·ªáu kh√¥ v√†o ch·∫•t l·ªèng. Khu·∫•y ƒë·ªÅu cho ƒë·∫øn khi kh√¥ng c√≤n c·ª•c b·ªôt.`,
        
        // Cooking methods
        'chi√™n': `Chi√™n trong d·∫ßu n√≥ng v·ªõi l·ª≠a v·ª´a. L·∫≠t ƒë·ªÅu ƒë·ªÉ m√≥n ƒÉn ch√≠n ƒë·ªÅu v√† c√≥ m√†u v√†ng ƒë·∫πp m·∫Øt.`,
        'x√†o': `X√†o nhanh tr√™n l·ª≠a l·ªõn ƒë·ªÉ gi·ªØ nguy√™n ƒë·ªô gi√≤n c·ªßa nguy√™n li·ªáu. Khu·∫•y ƒë·ªÅu ƒë·ªÉ tr√°nh b·ªã ch√°y.`,
        'n∆∞·ªõng': `N∆∞·ªõng trong l√≤ ·ªü nhi·ªát ƒë·ªô th√≠ch h·ª£p. Theo d√µi th∆∞·ªùng xuy√™n ƒë·ªÉ ƒë·∫£m b·∫£o m√≥n ƒÉn ch√≠n ƒë·ªÅu v√† kh√¥ng b·ªã kh√¥.`,
        'lu·ªôc': `Lu·ªôc trong n∆∞·ªõc s√¥i cho ƒë·∫øn khi nguy√™n li·ªáu ch√≠n m·ªÅm. Th·ªùi gian lu·ªôc t√πy thu·ªôc v√†o lo·∫°i th·ª±c ph·∫©m.`,
        'h·∫ßm': `H·∫ßm v·ªõi l·ª≠a nh·ªè trong th·ªùi gian d√†i ƒë·ªÉ nguy√™n li·ªáu m·ªÅm v√† th·∫•m v·ªã. ƒê·∫≠y n·∫Øp ƒë·ªÉ gi·ªØ h∆°i n∆∞·ªõc.`,
        'rang': `Rang tr√™n ch·∫£o kh√¥ ho·∫∑c v·ªõi √≠t d·∫ßu ƒë·ªÉ t·∫°o m√πi th∆°m. Khu·∫•y ƒë·ªÅu ƒë·ªÉ tr√°nh b·ªã ch√°y.`,
        'n·∫•u': `N·∫•u v·ªõi nhi·ªát ƒë·ªô ph√π h·ª£p cho ƒë·∫øn khi nguy√™n li·ªáu ch√≠n. ƒêi·ªÅu ch·ªânh l·ª≠a theo y√™u c·∫ßu c·ªßa m√≥n ƒÉn.`,
        
        // Specific techniques
        'ƒëun': `ƒêun n√≥ng v·ªõi l·ª≠a v·ª´a ph·∫£i. Khu·∫•y ƒë·ªÅu ƒë·ªÉ tr√°nh b·ªã d√≠nh ƒë√°y v√† ƒë·∫£m b·∫£o nhi·ªát ƒë·ªô ƒë·ªìng ƒë·ªÅu.`,
        'ƒë·ªï': `ƒê·ªï h·ªón h·ª£p m·ªôt c√°ch nh·∫π nh√†ng v√† ƒë·ªÅu. Ki·ªÉm so√°t t·ªëc ƒë·ªô ƒë·ªï ƒë·ªÉ ƒë·∫°t k·∫øt qu·∫£ mong mu·ªën.`,
        'th√™m': `Th√™m nguy√™n li·ªáu theo ƒë√∫ng th·ª© t·ª± v√† t·ª∑ l·ªá. Tr·ªôn ƒë·ªÅu sau m·ªói l·∫ßn th√™m ƒë·ªÉ ƒë·∫£m b·∫£o h√≤a quy·ªán.`,
        'n√™m': `N√™m n·∫øm gia v·ªã theo kh·∫©u v·ªã. Th√™m t·ª´ t·ª´ v√† n·∫øm th·ª≠ ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c h∆∞∆°ng v·ªã c√¢n b·∫±ng.`,
        'ƒë·ªÉ': `ƒê·ªÉ ngh·ªâ ho·∫∑c ·ªß trong th·ªùi gian quy ƒë·ªãnh. ƒêi·ªÅu n√†y gi√∫p nguy√™n li·ªáu th·∫•m v·ªã v√† ƒë·∫°t ƒë·ªô ch√≠n ho√†n h·∫£o.`,
        
        // Final steps
        'b√†y': `B√†y tr√≠ m√≥n ƒÉn ra ƒëƒ©a m·ªôt c√°ch h·∫•p d·∫´n. Ch√∫ √Ω ƒë·∫øn m√†u s·∫Øc v√† c√°ch s·∫Øp x·∫øp ƒë·ªÉ tƒÉng t√≠nh th·∫©m m·ªπ.`,
        'trang tr√≠': `Trang tr√≠ m√≥n ƒÉn v·ªõi c√°c nguy√™n li·ªáu ph√π h·ª£p. T·∫°o ƒëi·ªÉm nh·∫•n ƒë·ªÉ m√≥n ƒÉn tr·ªü n√™n b·∫Øt m·∫Øt h∆°n.`,
        'ph·ª•c v·ª•': `Ph·ª•c v·ª• m√≥n ƒÉn khi c√≤n n√≥ng. Chu·∫©n b·ªã ƒë·∫ßy ƒë·ªß gia v·ªã v√† rau s·ªëng k√®m theo n·∫øu c·∫ßn.`,
    };
    
    // Find matching action in step text
    for (const [action, description] of Object.entries(actionDescriptions)) {
        if (step.includes(action)) {
            return description;
        }
    }
    
    // Step-specific descriptions based on position
    if (stepNumber === 1) {
        return `B∆∞·ªõc ƒë·∫ßu ti√™n trong qu√° tr√¨nh ch·∫ø bi·∫øn ${recipeName}. Th·ª±c hi·ªán c·∫©n th·∫≠n ƒë·ªÉ t·∫°o n·ªÅn t·∫£ng t·ªët cho nh·ªØng b∆∞·ªõc ti·∫øp theo.`;
    } else if (stepIndex === 'last') {
        return `B∆∞·ªõc ho√†n thi·ªán cu·ªëi c√πng c·ªßa m√≥n ${recipeName}. Ki·ªÉm tra k·ªπ h∆∞∆°ng v·ªã v√† nhi·ªát ƒë·ªô tr∆∞·ªõc khi ph·ª•c v·ª•.`;
    }
    
    // Generic descriptions based on content
    if (step.includes('gia v·ªã') || step.includes('n√™m')) {
        return 'N√™m n·∫øm gia v·ªã theo kh·∫©u v·ªã. ƒêi·ªÅu ch·ªânh ƒë·ªô m·∫∑n, ng·ªçt, chua, cay cho ph√π h·ª£p v·ªõi s·ªü th√≠ch gia ƒë√¨nh.';
    }
    
    if (step.includes('l·ª≠a') || step.includes('nhi·ªát ƒë·ªô')) {
        return 'ƒêi·ªÅu ch·ªânh nhi·ªát ƒë·ªô ph√π h·ª£p ƒë·ªÉ ƒë·∫£m b·∫£o m√≥n ƒÉn ch√≠n ƒë·ªÅu. Theo d√µi qu√° tr√¨nh n·∫•u ƒë·ªÉ tr√°nh b·ªã ch√°y ho·∫∑c ch∆∞a ch√≠n.';
    }
    
    if (step.includes('khu√¥n')) {
        return 'Chu·∫©n b·ªã khu√¥n n∆∞·ªõng s·∫°ch s·∫Ω v√† thoa b∆° ƒë·ªÉ tr√°nh d√≠nh. ƒê·ªï h·ªón h·ª£p v√†o khu√¥n m·ªôt c√°ch ƒë·ªÅu ƒë·∫∑n.';
    }
    
    // Default description
    return `Th·ª±c hi·ªán b∆∞·ªõc ${stepNumber} m·ªôt c√°ch c·∫©n th·∫≠n theo h∆∞·ªõng d·∫´n. ƒê·∫£m b·∫£o tu√¢n th·ªß ƒë√∫ng quy tr√¨nh ƒë·ªÉ ƒë·∫°t k·∫øt qu·∫£ t·ªët nh·∫•t.`;
}

async function addStepDescriptions() {
    try {
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('‚úÖ Connected to MongoDB');

        // Get all recipes
        const recipes = await Recipe.find({});
        console.log(`üìä Processing ${recipes.length} recipes...`);

        let updatedRecipes = 0;
        let totalStepsUpdated = 0;

        for (const recipe of recipes) {
            if (!recipe.steps || recipe.steps.length === 0) {
                continue;
            }

            let hasUpdates = false;
            const updatedSteps = recipe.steps.map((step, index) => {
                // Check if description is missing or empty
                if (!step.description || step.description.trim() === '') {
                    hasUpdates = true;
                    totalStepsUpdated++;
                    
                    const isLastStep = index === recipe.steps.length - 1;
                    const stepIndex = isLastStep ? 'last' : index;
                    
                    return {
                        ...step.toObject(),
                        description: generateStepDescription(step.step, stepIndex, recipe.name)
                    };
                }
                return step;
            });

            if (hasUpdates) {
                await Recipe.findByIdAndUpdate(recipe._id, {
                    steps: updatedSteps
                });
                updatedRecipes++;
                console.log(`‚úÖ Updated ${recipe.name} - ${updatedSteps.filter(s => s.description).length} steps`);
            }
        }

        console.log('\nüìà Summary:');
        console.log(`Total recipes processed: ${recipes.length}`);
        console.log(`Recipes updated: ${updatedRecipes}`);
        console.log(`Total steps updated: ${totalStepsUpdated}`);

        // Verification
        const verifyRecipes = await Recipe.find({});
        let recipesWithMissingDescriptions = 0;
        let stepsWithMissingDescriptions = 0;

        for (const recipe of verifyRecipes) {
            if (recipe.steps && recipe.steps.length > 0) {
                let recipeMissingDesc = false;
                for (const step of recipe.steps) {
                    if (!step.description || step.description.trim() === '') {
                        stepsWithMissingDescriptions++;
                        recipeMissingDesc = true;
                    }
                }
                if (recipeMissingDesc) {
                    recipesWithMissingDescriptions++;
                }
            }
        }

        console.log('\nüîç Verification:');
        console.log(`Recipes still missing descriptions: ${recipesWithMissingDescriptions}`);
        console.log(`Steps still missing descriptions: ${stepsWithMissingDescriptions}`);

        if (stepsWithMissingDescriptions === 0) {
            console.log('üéâ All recipe steps now have descriptions!');
        }

        await mongoose.disconnect();
        console.log('üì± Disconnected from MongoDB');

    } catch (error) {
        console.error('‚ùå Error:', error);
        await mongoose.disconnect();
    }
}

addStepDescriptions();
